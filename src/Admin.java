/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import com.formdev.flatlaf.FlatDarkLaf; // Import untuk FlatDarkLaf
import javax.swing.UIManager; // Import untuk UIManager
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Hazel Ray
 */
public class Admin extends javax.swing.JFrame {

    private Connection connection;

    public Admin() {
        initComponents();
        connectToDatabase(); // Panggil metode untuk menghubungkan ke database
        loadDataToTable(); // Panggil metode untuk mengambil dan menampilkan data di tabel
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nama", "Film ", "Jenis Tiket", "Jumlah", "Total", "Ruangan", "Sisa Kapasitas"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 311, 956, 275));

        jLabel1.setText("Admin Dashboard");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 270, -1, -1));

        jButton1.setText("Delete");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 600, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ant-man.gif"))); // NOI18N
        jLabel2.setMaximumSize(new java.awt.Dimension(1000, 500));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, -40, -1, 320));

        pack();
    }// </editor-fold>//GEN-END:initComponents

     // Event handler "ActionPerformed" untuk tombol "Delete"

    private void ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActionPerformed
        // TODO add your handling code here:
        
         // Mendapatkan baris yang dipilih
        int selectedRow = jTable1.getSelectedRow();
        
        if (selectedRow != -1) { // Pastikan ada baris yang dipilih
            // Konfirmasi sebelum menghapus
            int confirmation = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi Penghapusan", JOptionPane.YES_NO_OPTION);
            
            if (confirmation == JOptionPane.YES_OPTION) {
                // Ambil nilai dari kolom yang dibutuhkan sebagai identifikasi
                String nama = jTable1.getValueAt(selectedRow, 0).toString();
                String film = jTable1.getValueAt(selectedRow, 1).toString();
                String jenisTiket = jTable1.getValueAt(selectedRow, 2).toString();
                String showTime = jTable1.getValueAt(selectedRow, 6).toString();
                
                // Menghapus data dari database berdasarkan kolom 'name', 'film', 'ticket_type', dan 'show_time'
                try {
                    String query = "DELETE FROM ticket_booking WHERE name = ? AND film = ? AND ticket_type = ? AND show_time = ?";
                    java.sql.PreparedStatement pst = connection.prepareStatement(query);
                    pst.setString(1, nama);
                    pst.setString(2, film);
                    pst.setString(3, jenisTiket);
                    pst.setString(4, showTime);
                    
                    int rowsAffected = pst.executeUpdate();
                    
                    if (rowsAffected > 0) {
                        // Menghapus baris dari tabel setelah berhasil menghapus dari database
                        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                        model.removeRow(selectedRow); // Hapus baris dari tabel
                        JOptionPane.showMessageDialog(this, "Data berhasil dihapus!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Gagal menghapus data!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error saat menghapus data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            
        } else {
            JOptionPane.showMessageDialog(this, "Pilih data yang ingin dihapus!", "Peringatan", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_ActionPerformed

    /**
     * @param args the command line arguments
     */
   public static void main(String args[]) {
    /* Set the FlatDark look and feel */
    try {
        UIManager.setLookAndFeel(new FlatDarkLaf());
    } catch (Exception e) {
        e.printStackTrace();
    }
    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new Admin().setVisible(true);
        }
    });
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void connectToDatabase() {
        try {
            String url = "jdbc:postgresql://localhost:5432/Java"; // Database name
            String user = "postgres"; // Ganti dengan username database
            String password = "hazelray"; // Ganti dengan password database
            connection = DriverManager.getConnection(url, user, password);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Koneksi ke database gagal: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    private void loadDataToTable() {
    String query = "SELECT * FROM ticket_booking"; 
    try {
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery(query);

        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Name"); // Sesuai dengan kolom di tabel
        model.addColumn("Film");
        model.addColumn("Jenis Tiket");
        model.addColumn("Jumlah");
        model.addColumn("Total");
        model.addColumn("Ruangan");
        model.addColumn("Waktu Tayang");
        model.addColumn("Sisa Kapasitas");

        while (resultSet.next()) {
            model.addRow(new Object[]{
                resultSet.getString("name"), // Sesuai dengan kolom di tabel
                resultSet.getString("film"),
                resultSet.getString("ticket_type"), // Pastikan kolom sesuai
                resultSet.getInt("quantity"), // Sesuai dengan kolom di tabel
                resultSet.getInt("total"), // Sesuai dengan kolom di tabel
                resultSet.getString("room"), // Sesuai dengan kolom di tabel
                resultSet.getString("show_time"), // Sesuai dengan kolom di tabel
                resultSet.getString("Remaining_capacity"),
            });
        }

        jTable1.setModel(model);
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal mengambil data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


    // Metode lainnya dan main tetap sama...
}