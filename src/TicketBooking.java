/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;


/**
 *
 * @author Hazel Ray
 */
public class TicketBooking extends javax.swing.JFrame {
  private ButtonGroup filmGroup; // Untuk radio button film
    private ButtonGroup ticketTypeGroup; // Untuk radio button jenis tiket
     
    private Connection conn;  // Tambahkan variabel koneksi

    // HashMap untuk menyimpan sisa kapasitas setiap ruangan
    private Map<String, Integer> roomCapacities;
    

    public TicketBooking() {
        initComponents();
        filmGroup = new ButtonGroup();
        ticketTypeGroup = new ButtonGroup();

         // Panggil method untuk koneksi ke database
            connectToDatabase();
        // Mengelompokkan radio button film
        filmGroup.add(jRadioButton1); // EndGame
        jRadioButton1.setActionCommand("EndGame"); // Menetapkan ActionCommand untuk film EndGame

        filmGroup.add(jRadioButton2); // Ant Man
        jRadioButton2.setActionCommand("Ant Man"); // Menetapkan ActionCommand untuk film Ant Man

        filmGroup.add(jRadioButton3); // Batman
        jRadioButton3.setActionCommand("Batman"); // Menetapkan ActionCommand untuk film Batman


        // Mengelompokkan radio button jenis tiket
        ticketTypeGroup.add(jRadioButton4); // Reguler
        ticketTypeGroup.add(jRadioButton5); // VIP
        
         // Menambahkan ActionListener untuk tombol Proses
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
    
    
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();
        BG = new javax.swing.JLabel();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("20.00");
        setBackground(new java.awt.Color(0, 204, 204));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Nama");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, -1, -1));

        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Film ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, -1, -1));

        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Jenis Tiket");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, -1, -1));

        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("Jam Tayang");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, -1, -1));

        jLabel5.setForeground(new java.awt.Color(204, 204, 204));
        jLabel5.setText("Harga Tiket");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, -1, -1));

        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setText("Jumlah Beli");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, -1, -1));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 126, -1));
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, 202, -1));

        jComboBox1.setEditable(true);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "15.30", "18.00", "20.00", "22.00" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 150, -1, -1));

        jRadioButton1.setForeground(new java.awt.Color(204, 204, 204));
        jRadioButton1.setText("EndGame");
        getContentPane().add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, -1, -1));

        jRadioButton2.setForeground(new java.awt.Color(204, 204, 204));
        jRadioButton2.setText("Ant Man");
        getContentPane().add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 70, -1, -1));

        jRadioButton3.setForeground(new java.awt.Color(204, 204, 204));
        jRadioButton3.setText("Batman");
        getContentPane().add(jRadioButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, -1, -1));

        jRadioButton4.setForeground(new java.awt.Color(204, 204, 204));
        jRadioButton4.setText("Reguler");
        getContentPane().add(jRadioButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, -1, -1));

        jRadioButton5.setForeground(new java.awt.Color(204, 204, 204));
        jRadioButton5.setText("VIP");
        getContentPane().add(jRadioButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, -1, -1));
        getContentPane().add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 230, 71, -1));

        jButton1.setText("Proses");
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, -1, -1));

        jLabel7.setForeground(new java.awt.Color(204, 204, 204));
        jLabel7.setText("Total");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 320, -1, -1));
        getContentPane().add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 320, 166, -1));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C-102", "HH-101", "SAW", "PASCA" }));
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 150, -1, -1));

        BG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/teater.jpg"))); // NOI18N
        getContentPane().add(BG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 360));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
    int price = 0;
    int quantity;
    String jenisTiket = null;

    // Validasi input jumlah tiket
    try {
        quantity = Integer.parseInt(jTextField3.getText());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Masukkan jumlah tiket yang valid!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Mengambil ruangan dan waktu tayang yang dipilih
    String selectedRoom = (String) jComboBox2.getSelectedItem();
    String selectedTime = (String) jComboBox1.getSelectedItem();

    // Ambil kapasitas terakhir berdasarkan ruangan dan waktu tayang dari database
    int kapasitas = getKapasitasTerakhir(selectedRoom, selectedTime);
    if (kapasitas < 0) {
        JOptionPane.showMessageDialog(null, "Error saat mengambil kapasitas ruangan dari database!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validasi apakah jumlah tiket yang dibeli melebihi kapasitas ruangan pada waktu tersebut
    if (quantity > kapasitas) {
        JOptionPane.showMessageDialog(null, "Jumlah tiket melebihi kapasitas ruangan untuk waktu " + selectedTime + "! Kapasitas: " + kapasitas, "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Menghitung harga tiket berdasarkan pilihan jenis tiket
    if (jRadioButton4.isSelected()) { // Reguler
        price = 30000;
        jenisTiket = "Reguler";
    } else if (jRadioButton5.isSelected()) { // VIP
        price = 100000;
        jenisTiket = "VIP";
    } else {
        JOptionPane.showMessageDialog(null, "Silakan pilih jenis tiket (Reguler atau VIP)", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Menampilkan harga tiket di textField2
    jTextField2.setText(String.valueOf(price));

    // Menghitung total harga tiket
    int total = price * quantity;
    jTextField4.setText(String.valueOf(total));

    // Dapatkan informasi tambahan untuk diteruskan ke CetakTicket
    String nama = jTextField1.getText();
    String film = filmGroup.getSelection().getActionCommand();

    // Menghitung sisa kapasitas
    int sisaKapasitas = kapasitas - quantity;

    // **Insert data ke dalam database**
    try {
        String query = "INSERT INTO ticket_booking (name, film, ticket_type, show_time, price, quantity, total, room, remaining_capacity) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement pst = conn.prepareStatement(query);

        // Mengisi parameter dari input pengguna
        pst.setString(1, nama);
        pst.setString(2, film);
        pst.setString(3, jenisTiket);
        pst.setString(4, selectedTime);
        pst.setInt(5, price);
        pst.setInt(6, quantity);
        pst.setInt(7, total);
        pst.setString(8, selectedRoom);
        pst.setInt(9, sisaKapasitas); // Menyimpan sisa kapasitas

        // Menjalankan query insert
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Data berhasil disimpan ke database!");

        // Update remaining_capacity di tabel
        updateRemainingCapacity(selectedRoom, selectedTime, sisaKapasitas);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error saat menyimpan data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Menampilkan form CetakTicket
    CetakTicket cetakTicket = new CetakTicket(nama, film, jenisTiket, quantity, total, selectedRoom, sisaKapasitas);
    cetakTicket.setVisible(true);
    this.dispose();
}

// Method untuk mendapatkan kapasitas terakhir dari database berdasarkan ruangan dan waktu tayang
private int getKapasitasTerakhir(String room, String showTime) {
    int kapasitas = -1;
    try {
        String query = "SELECT remaining_capacity FROM ticket_booking WHERE room = ? AND show_time = ? ORDER BY id DESC LIMIT 1";
        PreparedStatement pst = conn.prepareStatement(query);
        pst.setString(1, room);
        pst.setString(2, showTime);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            kapasitas = rs.getInt("remaining_capacity");
        } else {
            // Jika belum ada data, kembalikan nilai default kapasitas
            switch (room) {
                case "C-102":
                    kapasitas = 50;
                    break;
                case "HH-101":
                    kapasitas = 75;
                    break;
                case "SAW":
                    kapasitas = 100;
                    break;
                case "PASCA":
                    kapasitas = 30;
                    break;
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    return kapasitas;
}

// Method untuk memperbarui remaining_capacity di database berdasarkan ruangan dan waktu tayang
private void updateRemainingCapacity(String room, String showTime, int remainingCapacity) {
    try {
        String query = "UPDATE ticket_booking SET remaining_capacity = ? WHERE room = ? AND show_time = ? ORDER BY id DESC LIMIT 1";
        PreparedStatement pst = conn.prepareStatement(query);
        pst.setInt(1, remainingCapacity);
        pst.setString(2, room);
        pst.setString(3, showTime);
        pst.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}








    
       /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicketBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicketBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicketBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicketBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicketBooking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BG;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList<String> jList1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

    // Method untuk menghubungkan ke database
   private void connectToDatabase() {
    try {
        // URL database (sesuaikan dengan konfigurasi Anda)
        String url = "jdbc:postgresql://localhost:5432/Java"; 
        String username = "postgres";
        String password = "hazelray";

        // Membuat koneksi
        conn = DriverManager.getConnection(url, username, password);
        System.out.println("Koneksi ke database berhasil!");
    } catch (SQLException e) {
        // Jika terjadi error koneksi
        JOptionPane.showMessageDialog(null, "Koneksi ke database gagal: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

}
